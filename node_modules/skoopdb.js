var Db = require('mongodb').Db,
  Connection = require('mongodb').Connection,
  Server = require('mongodb').Server,
  EventEmitter = require('events').EventEmitter,
  inherits = require('util').inherits,
  crypto = require('crypto'),
  debug = require('util').debug,
  inspect = require('util').inspect,
  Skoop = require('skoop');

var _defHost = process.env['MONGO_NODE_DRIVER_HOST'] != null ? process.env['MONGO_NODE_DRIVER_HOST'] : 'localhost';
var _defPort = process.env['MONGO_NODE_DRIVER_PORT'] != null ? process.env['MONGO_NODE_DRIVER_PORT'] : Connection.DEFAULT_PORT;

var SkoopDb = exports.SkoopDb = function (host, port, options) {
	EventEmitter.call(this);
	this.host = host == null ? _defHost : host;
	this.port = port == null ? _defPort : port;
	this.options = options == null ? {} : options;
	this.db = new Db('skoopdb', new Server(this.host, this.port, this.options), {});
	this.error = null;

  // Set up logger
  if (this.options.logger != null &&
  		(typeof this.options.logger.debug == 'function') &&
  		(typeof this.options.logger.error == 'function') &&
  		(typeof this.options.logger.log == 'function'))
		this.logger = this._options.logger;
   else
   	this.logger = {error:function(message, object) {}, log:function(message, object) {}, debug:function(message, object) {}};
};

inherits(SkoopDb, EventEmitter);

/*
 * Validate the db can be opened and all required objects exists.
 * Returns true/false
 */
SkoopDb.prototype.validateDb = function() {
	this.db.open(function(err, db) {
		if (err == null) {
			db.createCollection('skoops', {'safe':false}, function(err, collection) {
				if (err != null)
					throw new Error("Unable to create the skoops collection: " + err);
			});
		} else
			throw new Error("Could not connect to the database: " + err);
	});
};

/*
 * creates a skoop
 * @param user: identifier for a user
 * @param {Object} properties properties of a skoop (optional)
 * @param {Function} callback (optional)
 * returns skoop in callback
 */
SkoopDb.prototype.createSkoop = function(user, properties, callback) {
	var self = this;

	if (properties != null && properties.id)
		return callback(new Error("The skoop " + properties.id + " already exists."), null);

	var skoop = new Skoop.Skoop(user, properties);

	if (!skoop.valid) {
		var msg = "Invalid skoop: " + skoop.error;
		this.emit('error', msg);

		if (typeof callback === 'function')
			return callback("Invalid skoop: " + skoop.error, null);
		else
			return;
	}

	this.db.open(function(err, db) {
		if (err != null)
			return callback(err, null);

		//db.strict = false;
		// insert skoop
		db.collection('skoops', {}, function(err, collection) {
			var skoops;

			if (err == null)
				skoops = collection;
			else {
				db.createCollection('skoops', {}, function(err, collection) {
					if (err == null)
						skoops = collection;
					else
						return callback(new Error("Unable to create the skoops collection: " + err), null);
				});
			}

			skoops.insert(skoop, function(err, skoop) {
					if (err) {
						self.error = err;
						self.emit('error', err);
					} else
						self.emit('inserted', skoop);
			});
			db.close();

			if ('function' === typeof callback) {
				if (this.error)
					return callback(error, null);
				else
					return callback(null, skoop);
			} else
				return;
		});
	});
};

/*
 * Updates using skoop._id
 * @param {Skoop} Skoop
 * @param {Function} callback returns error (optional)
 */
SkoopDb.prototype.updateSkoop = function(skoop, callback) {
	var self = this;

	if (!(skoop instanceof Skoop.Skoop) || !skoop._id)
		return callback(new Error("Object must be a valid skoop with an id"), null);

	if (!skoop.valid) {
		var msg = "Invalid skoop: " + skoop.error;
		this.emit('error', msg);

		if (typeof callback === 'function')
			return callback("Invalid skoop: " + skoop.error, null);
		else
			return;
	}

	this.db.open(function(err, db) {
		if (err != null)
			return callback(err, null);

		//db.strict = false;
		// update skoop
		db.collection('skoops', {}, function(err, collection) {
			var skoops;

			if (err == null)
				skoops = collection;
			else {
				db.createCollection('skoops', {}, function(err, collection) {
					if (err == null)
						skoops = collection;
					else
						return callback(new Error("Unable to create the skoops collection: " + err), null);
				});
			}

			skoops.update({'_id':skoop._id}, skoop, function(err) {
				if (err) {
					self.error = err;
					this.emit('error', err);
				} else
					this.emit('updated');
			});
			db.close();
		});
	});
};

/*
 * removes a skoop using the skoop._id
 * @param {Skoop} Skoop
 * @param {Function} callback returns error (optional)
 */
SkoopDb.prototype.removeSkoop = function(skoop, callback) {
	var self = this;

	if (!(skoop instanceof Skoop.Skoop) || !skoop._id)
		return callback(new Error("Object must be a valid skoop with an id"), null);

	this.db.open(function(err, db) {
		if (err != null)
			return callback(err, null);

		//db.strict = false;
		db.collection('skoops', {}, function(err, collection) {
			var skoops;

			if (err == null)
				skoops = collection;
			else {
				db.createCollection('skoops', {}, function(err, collection) {
					if (err == null)
						skoops = collection;
					else
						return callback(new Error("Unable to create the skoops collection: " + err), null);
				});
			}

			skoops.remove({'_id':skoop._id}, {}, function(err) {
				if (err) {
					self.error = err;
					this.emit('error', err);
				} else
					this.emit('removed');
			});
			db.close();
		});
	});
};

/**
 * Returns all matches
 * @param {Object} query a list of Skoop fields to use in the query
 * @param {Function} callback returns skoops or error
 */
SkoopDb.prototype.getSkoops = function(query, callback) {
	this.db.open(function(err, db) {
		if (err != null)
			return callback(err, null);

		//db.strict = false;
		db.collection('skoops', {}, function(err, collection) {
			if (err != null)
				return callback(new Error("Error finding skoops collection: " + err), null);

			collection.find(query, function(err, cursor) {
				if (err == null) {
					var skoops = [], i = 0;

					cursor.each(function(err, doc) {
						// TODO: if invalid skoop emit error for invalid Skoop
						if (doc == null) {
							db.close();
							return callback(null, skoops);
						} else if ('user' in doc)
							skoops[i++] = new Skoop.Skoop(doc['user'], doc);
					});
				} else
					return callback(err, null);
			});
		});
	});
};
